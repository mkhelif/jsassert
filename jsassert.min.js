/**
 * Framework used to simplify JavaScript Unit testing.
 */
var JSAssert=JSAssert||(function(){var suites=[];var addTestSuite=function(name,suite){suites.push({name:name,tests:suite});};var execute=function(options){var settings={onSuiteStarted:function(){},onSuiteEnded:function(){},onTestStarted:function(){},onTestEnded:function(){},onFinished:function(){}};for(var property in settings){settings[property]=options[property]||settings[property];}
var summary={passed:0,failed:0,duration:0};var suiteId=0;for(var index in suites){var suite=suites[index];var suiteResult={id:suiteId++,name:suite.name,passed:0,failed:0,duration:0}
settings.onSuiteStarted(suiteResult);var testId=0;for(var test in suite.tests){var testResult={id:suiteId+'_'+testId++,name:test,duration:0,success:true,error:null};settings.onTestStarted(testResult);var start=new Date().getTime();try{suite.tests[test]();testResult.success=true;}catch(error){testResult.error=error;testResult.success=false;}
var end=new Date().getTime();testResult.duration=(end-start);settings.onTestEnded(testResult);if(testResult.success){suiteResult.passed++;}else{suiteResult.failed++;}
suiteResult.duration+=testResult.duration;}
settings.onSuiteEnded(suiteResult);summary.passed+=suiteResult.passed;summary.failed+=suiteResult.failed;summary.duration+=suiteResult.duration;}
settings.onFinished(summary);};return{execute:execute,addTestSuite:addTestSuite};}());var assertThat=assertThat||function(object){var isNotNull=function(message){assertThat(typeof object!='undefined'&&object!=null).isTrue(message);return this;};var isNull=function(message){assertThat(typeof object=='undefined'||object==null).isTrue(message);return this;};var assertions={};switch(typeof object){case"number":assertions=numberAssertions;break;case"boolean":assertions=booleanAssertions;break;case"string":assertions=stringAssertions;break;case"object":if(object instanceof Array){assertions=arrayAssertions;}else{assertions=objectAssertions;}
break;}
assertions.object=object;assertions.isNotNull=isNotNull;assertions.isNull=isNull;return assertions;};var booleanAssertions={isTrue:function(message){if(this.object!=true){throw new Error(message);}
return this;},isFalse:function(message){assertThat(!this.object).isTrue(message);return this;},equals:function(expected,message){assertThat(this.object===expected).isTrue(message);return this;}};var numberAssertions={equals:function(expected,message){assertThat(this.object==expected).isTrue(message);return this;},isZero:function(message){assertThat(this.object).equals(0,message);return this;},isNotZero:function(message){assertThat(this.object!=0).isTrue(message);return this;},isGreaterThan:function(value,message){assertThat(this.object>value).isTrue(message);return this;},isGreaterOrEqualsTo:function(value,message){assertThat(this.object>=value).isTrue(message);return this;},isLowerThan:function(value,message){assertThat(this.object<value).isTrue(message);return this;},isLowerOrEqualsTo:function(value,message){assertThat(this.object<=value).isTrue(message);return this;}};var stringAssertions={hasLength:function(expected,message){assertThat(this.object).isNotNull(message);assertThat(this.object.length==expected).isTrue(message);return this;},equals:function(expected,message){assertThat(this.object).isNotNull(message);assertThat(this.object==expected).isTrue(message);return this;},contains:function(value,message){assertThat(this.object.indexOf(value)!=-1).isTrue(message);return this;},startsWith:function(value,message){assertThat(this.object.indexOf(value)==0).isTrue(message);return this;},endsWith:function(value,message){assertThat(this.object.indexOf(value)==this.object.length-value.length).isTrue(message);return this;},matches:function(regexp,message){assertThat(this.object.match(regexp)).isNotNull(message);return this;}};var objectAssertions={equals:function(expected,message){assertThat(this.object).isNotNull(message);for(var property in expected){assertThat(this.object[property]).equals(expected[property],message);}
return this;},has:function(property,message){assertThat(this.object).property(property).isNotNull(message);return this;},property:function(property){return assertThat(this.object[property]);}};var arrayAssertions={length:function(){return assertThat(this.object.length);},equals:function(expected,message){assertThat(this.object).isNotNull(message);assertThat(this.object.length==expected.length).isTrue(message);for(var property in expected){assertThat(this.object[property]).equals(expected[property],message);}
return this;},contains:function(element,message){assertThat(this.object).isNotNull(message);var found=false;for(var index in this.object){if(this.object[index]==element){found=true;break;}}
assertThat(found).isTrue(message);}};